name: Smart Matrix Microservice Builder

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (JSON array)'
        required: false
        default: '["frontend","catalogue","recommendation","voting"]'
      force_build:
        description: 'Force build even without changes'
        type: boolean
        default: false
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  repository_dispatch:
    types: [service-updated, bulk-update]

env:
  REGISTRY: docker.io
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  # Job to detect which services need building
  change-detection:
    name: Detect Service Changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      has-changes: ${{ steps.generate-matrix.outputs.has-changes }}
    steps:
      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate build matrix
        id: generate-matrix
        run: |
          # Define all services
          ALL_SERVICES='["frontend","catalogue","recommendation","voting"]'
          BUILD_MATRIX='{"include":[]}'
          HAS_CHANGES=false

          # Function to check if service needs building
          check_service_changes() {
            local service=$1
            local force_build=$2
            
            echo "Checking changes for service: $service"
            
            # Get last build info if exists
            LAST_BUILD_FILE="build-history/${service}-last-build.json"
            if [[ -f "$LAST_BUILD_FILE" ]]; then
              LAST_BUILD_SHA=$(jq -r '.source_sha // ""' "$LAST_BUILD_FILE")
              LAST_BUILD_TIME=$(jq -r '.build_time // ""' "$LAST_BUILD_FILE")
            else
              LAST_BUILD_SHA=""
              LAST_BUILD_TIME=""
              mkdir -p build-history
            fi
            
            # Get current SHA from service repository
            CURRENT_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/shaizshaikh/craftista-${service}/commits/main" \
              | jq -r '.sha // ""')
            
            if [[ -z "$CURRENT_SHA" ]]; then
              echo "Warning: Could not fetch current SHA for $service"
              return 1
            fi
            
            # Determine if build is needed
            NEEDS_BUILD=false
            REASON=""
            
            if [[ "$force_build" == "true" ]]; then
              NEEDS_BUILD=true
              REASON="Forced build requested"
            elif [[ -z "$LAST_BUILD_SHA" ]]; then
              NEEDS_BUILD=true
              REASON="No previous build found"
            elif [[ "$CURRENT_SHA" != "$LAST_BUILD_SHA" ]]; then
              NEEDS_BUILD=true
              REASON="Source code changed"
              
              # Get commit details for better versioning
              COMMIT_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/shaizshaikh/craftista-${service}/commits/${CURRENT_SHA}")
              
              COMMIT_MSG=$(echo "$COMMIT_INFO" | jq -r '.commit.message // ""')
              COMMIT_AUTHOR=$(echo "$COMMIT_INFO" | jq -r '.commit.author.name // ""')
              COMMIT_DATE=$(echo "$COMMIT_INFO" | jq -r '.commit.author.date // ""')
            else
              # Check if it's been more than 7 days since last build (for security updates)
              if [[ -n "$LAST_BUILD_TIME" ]]; then
                LAST_BUILD_EPOCH=$(date -d "$LAST_BUILD_TIME" +%s 2>/dev/null || echo 0)
                CURRENT_EPOCH=$(date +%s)
                DAYS_SINCE_BUILD=$(( (CURRENT_EPOCH - LAST_BUILD_EPOCH) / 86400 ))
                
                if [[ $DAYS_SINCE_BUILD -gt 7 ]]; then
                  NEEDS_BUILD=true
                  REASON="Scheduled security update (${DAYS_SINCE_BUILD} days since last build)"
                fi
              fi
            fi
            
            if [[ "$NEEDS_BUILD" == "true" ]]; then
              echo "✅ $service needs building: $REASON"
              
              # Determine bump type from commit message
              BUMP_TYPE="patch"
              if echo "$COMMIT_MSG" | grep -qE "BREAKING CHANGE|!:"; then
                BUMP_TYPE="major"
              elif echo "$COMMIT_MSG" | grep -qE "^feat(\(.+\))?:"; then
                BUMP_TYPE="minor"
              elif echo "$COMMIT_MSG" | grep -qE "^fix(\(.+\))?:"; then
                BUMP_TYPE="patch"
              fi
              
              # Add to build matrix
              BUILD_MATRIX=$(echo "$BUILD_MATRIX" | jq --arg service "$service" \
                --arg sha "$CURRENT_SHA" \
                --arg bump "$BUMP_TYPE" \
                --arg reason "$REASON" \
                --arg commit_msg "$COMMIT_MSG" \
                --arg commit_author "$COMMIT_AUTHOR" \
                --arg commit_date "$COMMIT_DATE" \
                '.include += [{
                  "service": $service,
                  "source_sha": $sha,
                  "bump_type": $bump,
                  "build_reason": $reason,
                  "commit_message": $commit_msg,
                  "commit_author": $commit_author,
                  "commit_date": $commit_date
                }]')
              
              return 0
            else
              echo "⏭️  $service: No changes detected"
              return 1
            fi
          }

          # Determine which services to check
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SERVICES_TO_CHECK='${{ github.event.inputs.services }}'
            FORCE_BUILD='${{ github.event.inputs.force_build }}'
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            if [[ "${{ github.event.action }}" == "service-updated" ]]; then
              SERVICES_TO_CHECK='["${{ github.event.client_payload.service }}"]'
            else
              SERVICES_TO_CHECK='${{ github.event.client_payload.services || env.ALL_SERVICES }}'
            fi
            FORCE_BUILD="false"
          else
            # Scheduled run
            SERVICES_TO_CHECK="$ALL_SERVICES"
            FORCE_BUILD="false"
          fi

          echo "Services to check: $SERVICES_TO_CHECK"
          echo "Force build: $FORCE_BUILD"

          # Check each service
          for service in $(echo "$SERVICES_TO_CHECK" | jq -r '.[]'); do
            if check_service_changes "$service" "$FORCE_BUILD"; then
              HAS_CHANGES=true
            fi
          done

          echo "Generated build matrix:"
          echo "$BUILD_MATRIX" | jq .

          # Set outputs
          echo "matrix=$BUILD_MATRIX" >> $GITHUB_OUTPUT
          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

  # Main build job
  build-services:
    name: Build ${{ matrix.service }}
    needs: change-detection
    if: needs.change-detection.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.change-detection.outputs.matrix) }}
      fail-fast: false
      max-parallel: 2  # Limit parallel builds to manage resources
    
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Clone service repository
        run: |
          echo "🔄 Cloning craftista-${{ matrix.service }}"
          git clone https://github.com/shaizshaikh/craftista-${{ matrix.service }}.git service-source
          cd service-source
          
          # Checkout specific SHA if provided
          if [[ "${{ matrix.source_sha }}" != "" ]]; then
            git checkout ${{ matrix.source_sha }}
            echo "✅ Checked out SHA: ${{ matrix.source_sha }}"
          fi
          
          # Set environment variables
          echo "SERVICE_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "SERVICE_FULL_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "SERVICE_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV

      - name: Calculate version
        id: version
        run: |
          SERVICE="${{ matrix.service }}"
          BUMP_TYPE="${{ matrix.bump_type }}"
          
          echo "🔍 Calculating next version for $SERVICE (bump: $BUMP_TYPE)"
          
          # Get existing versions from Docker Hub
          EXISTING_TAGS=$(curl -s -f "https://hub.docker.com/v2/repositories/${DOCKER_HUB_USERNAME}/craftista-${SERVICE}/tags/?page_size=100" \
            | jq -r '.results[]?.name // empty' 2>/dev/null \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+
               \
            | sort -V || echo "")
          
          if [[ -z "$EXISTING_TAGS" ]]; then
            CURRENT_VERSION="0.0.0"
            NEXT_VERSION="1.0.0"
            echo "📦 First version: $NEXT_VERSION"
          else
            CURRENT_VERSION=$(echo "$EXISTING_TAGS" | tail -n1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            case "$BUMP_TYPE" in
              major)
                MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
              minor)
                MINOR=$((MINOR+1)); PATCH=0 ;;
              patch|*)
                PATCH=$((PATCH+1)) ;;
            esac
            
            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "📈 Version bump: $CURRENT_VERSION → $NEXT_VERSION ($BUMP_TYPE)"
          fi
          
          # Set outputs and environment
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "next=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./service-source
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/craftista-${{ matrix.service }}:${{ env.NEXT_VERSION }}
            ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/craftista-${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/craftista-${{ matrix.service }}:sha-${{ env.SERVICE_SHA }}
          labels: |
            org.opencontainers.image.title=craftista-${{ matrix.service }}
            org.opencontainers.image.description=Craftista ${{ matrix.service }} microservice
            org.opencontainers.image.source=https://github.com/shaizshaikh/craftista-${{ matrix.service }}
            org.opencontainers.image.version=${{ env.NEXT_VERSION }}
            org.opencontainers.image.revision=${{ env.SERVICE_FULL_SHA }}
            org.opencontainers.image.created=${{ matrix.commit_date }}
            build.reason=${{ matrix.build_reason }}
            build.bump_type=${{ matrix.bump_type }}
            build.number=${{ github.run_number }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            VERSION=${{ env.NEXT_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ env.SERVICE_FULL_SHA }}

      - name: Security scan
        continue-on-error: true
        run: |
          echo "🔍 Running security scan for ${{ matrix.service }}"
          
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan image
          trivy image --severity HIGH,CRITICAL \
            --format sarif \
            --output trivy-${{ matrix.service }}.sarif \
            ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/craftista-${{ matrix.service }}:${{ env.NEXT_VERSION }} \
            || echo "⚠️  Security scan completed with warnings"

      - name: Update build history
        run: |
          mkdir -p build-history
          
          cat > build-history/${{ matrix.service }}-last-build.json << EOF
          {
            "service": "${{ matrix.service }}",
            "version": "${{ env.NEXT_VERSION }}",
            "previous_version": "${{ env.CURRENT_VERSION }}",
            "source_sha": "${{ env.SERVICE_FULL_SHA }}",
            "source_sha_short": "${{ env.SERVICE_SHA }}",
            "bump_type": "${{ matrix.bump_type }}",
            "build_reason": "${{ matrix.build_reason }}",
            "build_time": "$(date -Iseconds)",
            "build_number": ${{ github.run_number }},
            "commit_message": "${{ matrix.commit_message }}",
            "commit_author": "${{ matrix.commit_author }}",
            "commit_date": "${{ matrix.commit_date }}",
            "docker_image": "${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/craftista-${{ matrix.service }}:${{ env.NEXT_VERSION }}",
            "platforms": ["linux/amd64", "linux/arm64"],
            "labels": {
              "version": "${{ env.NEXT_VERSION }}",
              "revision": "${{ env.SERVICE_FULL_SHA }}",
              "build_number": "${{ github.run_number }}"
            }
          }
          EOF

      - name: Update deployment configurations
        run: |
          mkdir -p deployments/${{ matrix.service }}
          
          # Generate Helm values
          cat > deployments/${{ matrix.service }}/values.yaml << EOF
          # Auto-generated values for craftista-${{ matrix.service }}
          # Version: ${{ env.NEXT_VERSION }}
          # Generated: $(date -Iseconds)
          # Build: #${{ github.run_number }}
          
          image:
            repository: ${{ env.DOCKER_HUB_USERNAME }}/craftista-${{ matrix.service }}
            tag: "${{ env.NEXT_VERSION }}"
            pullPolicy: IfNotPresent
          
          nameOverride: ""
          fullnameOverride: "craftista-${{ matrix.service }}"
          
          replicaCount: 2
          
          service:
            type: ClusterIP
            port: 8080
            targetPort: 8080
          
          ingress:
            enabled: false
            className: "nginx"
            annotations: {}
            hosts:
              - host: ${{ matrix.service }}.craftista.local
                paths:
                  - path: /
                    pathType: Prefix
          
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          
          autoscaling:
            enabled: false
            minReplicas: 2
            maxReplicas: 10
            targetCPUUtilizationPercentage: 80
          
          nodeSelector: {}
          tolerations: []
          affinity: {}
          
          # Service-specific metadata
          metadata:
            version: "${{ env.NEXT_VERSION }}"
            sourceCommit: "${{ env.SERVICE_FULL_SHA }}"
            buildNumber: "${{ github.run_number }}"
            buildReason: "${{ matrix.build_reason }}"
            bumpType: "${{ matrix.bump_type }}"
          EOF
          
          # Generate Kubernetes manifest
          cat > deployments/${{ matrix.service }}/deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: craftista-${{ matrix.service }}
            labels:
              app.kubernetes.io/name: craftista-${{ matrix.service }}
              app.kubernetes.io/version: "${{ env.NEXT_VERSION }}"
              app.kubernetes.io/component: microservice
              app.kubernetes.io/part-of: craftista
          spec:
            replicas: 2
            selector:
              matchLabels:
                app.kubernetes.io/name: craftista-${{ matrix.service }}
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: craftista-${{ matrix.service }}
                  app.kubernetes.io/version: "${{ env.NEXT_VERSION }}"
                annotations:
                  build.number: "${{ github.run_number }}"
                  source.commit: "${{ env.SERVICE_FULL_SHA }}"
              spec:
                containers:
                - name: ${{ matrix.service }}
                  image: ${{ env.DOCKER_HUB_USERNAME }}/craftista-${{ matrix.service }}:${{ env.NEXT_VERSION }}
                  ports:
                  - containerPort: 8080
                    name: http
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: http
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /ready
                      port: http
                    initialDelaySeconds: 5
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: craftista-${{ matrix.service }}
            labels:
              app.kubernetes.io/name: craftista-${{ matrix.service }}
              app.kubernetes.io/version: "${{ env.NEXT_VERSION }}"
          spec:
            type: ClusterIP
            ports:
              - port: 8080
                targetPort: http
                protocol: TCP
                name: http
            selector:
              app.kubernetes.io/name: craftista-${{ matrix.service }}
          EOF

      - name: Commit build artifacts
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add build-history/ deployments/
          
          if ! git diff --staged --quiet; then
            git commit -m "🚀 Release ${{ matrix.service }} v${{ env.NEXT_VERSION }}

            Build Details:
            - Version: ${{ env.CURRENT_VERSION }} → ${{ env.NEXT_VERSION }}
            - Bump Type: ${{ matrix.bump_type }}
            - Build Reason: ${{ matrix.build_reason }}
            - Source Commit: ${{ env.SERVICE_FULL_SHA }}
            - Build Number: #${{ github.run_number }}
            - Commit Author: ${{ matrix.commit_author }}
            
            Changes:
            ${{ matrix.commit_message }}"
            
            git push origin main
          else
            echo "No changes to commit"
          fi

  # Summary and notification job
  build-summary:
    name: Build Summary
    needs: [change-detection, build-services]
    if: always() && needs.change-detection.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull latest changes
        run: git pull origin main
      
      - name: Generate build summary
        run: |
          echo "## 🚀 Microservices Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Run:** #${{ github.run_number }}"  >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Services Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Version | Bump Type | Reason | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|-----------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for build_file in build-history/*-last-build.json; do
            if [[ -f "$build_file" ]]; then
              service=$(jq -r '.service' "$build_file")
              version=$(jq -r '.version' "$build_file")
              bump_type=$(jq -r '.bump_type' "$build_file")
              build_reason=$(jq -r '.build_reason' "$build_file")
              build_number=$(jq -r '.build_number' "$build_file")
              
              if [[ "$build_number" == "${{ github.run_number }}" ]]; then
                echo "| $service | $version | $bump_type | $build_reason | ✅ Success |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for build_file in build-history/*-last-build.json; do
            if [[ -f "$build_file" ]]; then
              build_number=$(jq -r '.build_number' "$build_file")
              if [[ "$build_number" == "${{ github.run_number }}" ]]; then
                service=$(jq -r '.service' "$build_file")
                docker_image=$(jq -r '.docker_image' "$build_file")
                echo "- \`$docker_image\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done